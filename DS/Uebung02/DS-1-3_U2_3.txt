a)

1. zuerst binär wert ermitteln:
    binär signed:
    (23)_10 = 00010111

    umwandlung in negativ:
    original:   00010111
    invertiert: 11101000
    plus 1:     11101001

  bin: 11101001

2. casten auf short (2 Bytes):
  dort einfach die restlichen bytes mit 1 aufüllen
  wert: 11111111|11101001

  hex: 0xffe9
  dec: 65513


b)
             A         B
x1 | x2 | x2 & x1 | x1 ^ A | ~B | ~x2 | (~B | ~x2) | ~(x1 ^ x2 & x1) | ~x2
---|----|---------|--------|----|-----|------------|-----------------------
 0 |  0 |    0    |    0   |  1 |  1  |     1      |            1
 0 |  1 |    0    |    0   |  1 |  0  |     1      |            1
 1 |  0 |    0    |    1   |  0 |  1  |     1      |            1
 1 |  1 |    1    |    0   |  1 |  0  |     1      |            1

Die spezielle logische Verknüpfung ist eine Tautologie (immer wahr)

c)
  sizeof(!!5) ergibt 1, also ein byte => lösung wird in einen 8 bit wert gespeichert.

 !!5 ist aber ein boolscher Wert, deshalb wird eigentlich nur 1 bit benötigt.
 der Wert des Ergebnisses ist:
 5   == true
 !5  == false
 !!5 == true
 !!5 == 00000001

 d)

    value           |   logical shift   |   arithmetic shift
--------------------|-------------------|--------------------
 int8_t x = 0xAA    |                   |
    x >> 2          |        2A         |          EA       
    x << 3          |        50         |          50

(AA)_16 = (10101010)_2

logical shift:
(10101010)_2 >> 2 = (00101010)_2 = (2A)_16
(10101010)_2 << 3 = (01010000)_2 = (50)_16

arithmetic shift
(10101010)_2 >> 2 = (11101010)_2 = (EA)_16
(10101010)_2 << 3 = (01010000)_2 = (50)_16


e)
        0 1 0 0 1 0 0 1         Zahl 1
    +   1 0 1 1 1 1 0 1         Zahl 2
      1 1 1 1 1     1           Übertrag
    -------------------------------------
      1 0 0 0 0 0 1 1 0         Zwischenergebnis


      1 0 0 0 0 0 1 1 0         Zwischenergebnis
    + 0 1 1 1 0 1 1 0 0         Zahl 3
              1 1               Übertrag
    -------------------------------------
      1 1 1 1 1 0 0 1 0         Ergebnis


    01001001 + 10111101 + 11101100 = 00000001|11110010

    Übertrag: 00000001
    Ergebnis: 11110010

f)
Ja, es wurde gesetzt.
Die Begründung hierfür ist, dass der ursprüngliche Werte sich als 8 bit darstellen ließ, aber die Summe 9 bit benötigt.

g)

Z steht für Zahl die abgezogen wird
Ü für übertrag

(100)_10 / (15)_10

    01100100 / 00001111 = 00110
Z: -0000
Ü: -0000
    ----
   =0110
     1100
Z:  -0000
Ü:  -0000
     ----
    =1100
     11001
Z:  - 1111
Ü:  -11100
     -----
    =01010
      10100
Z:   - 1111
Ü:   -11110
      -----
     =00101
        1010
Z:     -0000
Ü:     -0000
        ----
        1010

=> Ergebnis ist 110 (Dezimal 6) mit Rest 1010

h)
Probe durch remultiplizieren:
Rest + (1111 * 0) + (1111 * 1 << 1) +  (1111 * 1 << 2)

W steht für wert der letzten addition
Z steht für zahl die addiert wird
Ü steht für Übertrag
E steht für das ergebnis des vorgangs

W: 00001010
Z: 00011110
Ü:   1111
E: 00101000

W: 00101000
Z: 00111100
Ü:  111
E: 01100100

=> Ergebnis ist 01100100 was (100)_10 entspricht

i)

(A1B7)_16 = (10100001|10110111)_2
(BBFF)_16 = (10111011|11111111)_2

    10100001|10110111       Zahl 1
+   10111011|11111111       Zahl 2
  1  1   111 1111111        Übertrag
-------------------------------------   
  1|01011101|10110110

(00000001|01011101|10110110)_2 = (15DB6)_16


