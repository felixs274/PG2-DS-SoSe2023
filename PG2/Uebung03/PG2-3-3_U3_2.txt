#include <iostream>
#include <fstream>
#include <chrono>
#include <random>
#include <array>
#include <string>


int main(){

    // Mersenne Twister-Algorithmus mit Unix timestamp
    std::mt19937 rng(std::chrono::steady_clock::now().time_since_epoch().count()); 

    // std::array - 50x6 
    std::array<std::array<std::string, 6>, 50> tan_numbers;

    for (int i = 0; i < 50; i++) {
        for (int j = 0; j < 6; j++) {
            std::string tan_number = std::to_string(rng() % 100000000); // Zahl zwischen 0 - 99999999 generieren
            tan_number.insert(0, 8 - tan_number.length(), '0'); // Vorne mit 0 auffüllen falls kürzer als 8 zeichen
            tan_numbers[i][j] = tan_number;
        }
    }


    // tan.txt ausgeben
    std::ofstream output_file("tan.txt");
    if (output_file.is_open()) {
        for (const auto& row : tan_numbers) {
            for (const auto& col : row) {
                output_file << col << " ";
            }
            output_file << std::endl;
        }
        output_file.close();
    } else {
        std::cerr << "Datei konnte nicht geöffnet werden." << std::endl;
        return 1;
    }

    return 0;

}